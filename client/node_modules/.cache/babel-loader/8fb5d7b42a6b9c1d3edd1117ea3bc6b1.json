{"ast":null,"code":"import _defineProperty from \"/Users/massimoguida/boot-camp/new/assignments/assignment21/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/massimoguida/boot-camp/new/assignments/assignment21/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/massimoguida/boot-camp/new/assignments/assignment21/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/massimoguida/boot-camp/new/assignments/assignment21/client/src/pages/Books.js\";\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport SaveBtn from \"../components/SaveBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Books() {\n  var _this2 = this;\n\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(function () {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(function (res) {\n      return setBooks(res.data);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ; // Deletes a book from the database with a given id, then reloads books from the db\n\n  function deleteBook(id) {\n    API.deleteBook(id).then(function (res) {\n      return loadBooks();\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    console.log(\"event.target.value 1\", event.target.value);\n    var _event$target$value = event.target.value,\n        name = _event$target$value.name,\n        value = _event$target$value.value;\n    setFormObject(_objectSpread({}, formObject, _defineProperty({}, name, value)));\n    console.log(\"formObject\", formObject);\n    console.log(\"formObject.value\", formObject.value);\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    var _this = this;\n\n    event.preventDefault();\n    console.log(\"Search Button clicked\");\n    console.log(\"event.target.value 2\", event.target.value);\n    API.getSearchedBooks({\n      title: formObject.name\n    }).then(function (res) {\n      if (res.data.status === \"error\") {\n        throw new Error(res.data.message);\n      }\n\n      _this.setState({\n        results: res.data.message,\n        error: \"\"\n      });\n\n      console.log(\"Response:\", res);\n    }).catch(function (err) {\n      return console.log(err);\n    }); // if (formObject.title && formObject.author) {\n    //   API.saveBook({\n    //     title: formObject.title,\n    //     author: formObject.author,\n    //     synopsis: formObject.synopsis\n    //   })\n    //     .then(res => loadBooks())\n    //     .catch(err => console.log(err));\n    // }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12 s-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      color: \"green\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"React Google Books Search\"), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      color: \"orange\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, \"Search for and Save Books of Interest\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"Book Search\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"title\",\n    placeholder: \"Search by Book Title (required, e.g. \\\"The Great Gatsby\\\")\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn // disabled={!(formObject.authors && formObject.title)}\n  , {\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, \"Search\")))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md 12 s-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Results\"), books.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, books.map(function (book) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: book._id,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/books/\" + book._id,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 23\n      }\n    }, book.title, \" by \", book.authors)), /*#__PURE__*/React.createElement(DeleteBtn, {\n      onClick: function onClick() {\n        return deleteBook(book._id);\n      },\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(SaveBtn, {\n      onClick: function onClick() {\n        return console.log(\"Book saved!\");\n      },\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }));\n  })) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, \"No Results to Display\"))));\n}\n\nexport default Books;","map":{"version":3,"sources":["/Users/massimoguida/boot-camp/new/assignments/assignment21/client/src/pages/Books.js"],"names":["React","useState","useEffect","DeleteBtn","SaveBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Books","books","setBooks","formObject","setFormObject","loadBooks","getBooks","then","res","data","catch","err","console","log","deleteBook","id","handleInputChange","event","target","value","name","handleFormSubmit","preventDefault","getSearchedBooks","title","status","Error","message","setState","results","error","color","length","map","book","_id","authors"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,oBAA/B;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,oBAAzC;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACf;AADe,kBAEWf,QAAQ,CAAC,EAAD,CAFnB;AAAA;AAAA,MAERgB,KAFQ;AAAA,MAEDC,QAFC;;AAAA,mBAGqBjB,QAAQ,CAAC,EAAD,CAH7B;AAAA;AAAA,MAGRkB,UAHQ;AAAA,MAGIC,aAHJ,kBAKf;;;AACAlB,EAAAA,SAAS,CAAC,YAAM;AACdmB,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT,CANe,CAUf;;AACA,WAASA,SAAT,GAAqB;AACnBf,IAAAA,GAAG,CAACgB,QAAJ,GACGC,IADH,CACQ,UAAAC,GAAG;AAAA,aACPN,QAAQ,CAACM,GAAG,CAACC,IAAL,CADD;AAAA,KADX,EAIGC,KAJH,CAIS,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,KAJZ;AAKD;;AAAA,GAjBc,CAmBf;;AACA,WAASG,UAAT,CAAoBC,EAApB,EAAwB;AACtBzB,IAAAA,GAAG,CAACwB,UAAJ,CAAeC,EAAf,EACGR,IADH,CACQ,UAAAC,GAAG;AAAA,aAAIH,SAAS,EAAb;AAAA,KADX,EAEGK,KAFH,CAES,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,KAFZ;AAGD,GAxBc,CA0Bf;;;AACA,WAASK,iBAAT,CAA2BC,KAA3B,EAAkC;AAChCL,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCI,KAAK,CAACC,MAAN,CAAaC,KAAjD;AADgC,8BAERF,KAAK,CAACC,MAAN,CAAaC,KAFL;AAAA,QAExBC,IAFwB,uBAExBA,IAFwB;AAAA,QAElBD,KAFkB,uBAElBA,KAFkB;AAGhCf,IAAAA,aAAa,mBAAKD,UAAL,sBAAkBiB,IAAlB,EAAyBD,KAAzB,GAAb;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BV,UAA1B;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCV,UAAU,CAACgB,KAA3C;AACD;;AAAA,GAjCc,CAmCf;AACA;;AACA,WAASE,gBAAT,CAA0BJ,KAA1B,EAAiC;AAAA;;AAC/BA,IAAAA,KAAK,CAACK,cAAN;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCI,KAAK,CAACC,MAAN,CAAaC,KAAjD;AAEA7B,IAAAA,GAAG,CAACiC,gBAAJ,CAAqB;AACnBC,MAAAA,KAAK,EAAErB,UAAU,CAACiB;AADC,KAArB,EAGCb,IAHD,CAGM,UAAAC,GAAG,EAAI;AACX,UAAIA,GAAG,CAACC,IAAJ,CAASgB,MAAT,KAAoB,OAAxB,EAAiC;AAC/B,cAAM,IAAIC,KAAJ,CAAUlB,GAAG,CAACC,IAAJ,CAASkB,OAAnB,CAAN;AACD;;AACD,MAAA,KAAI,CAACC,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAErB,GAAG,CAACC,IAAJ,CAASkB,OAApB;AAA6BG,QAAAA,KAAK,EAAE;AAApC,OAAd;;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,GAAzB;AACD,KATD,EAUKE,KAVL,CAUW,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,KAVd,EAL+B,CAiB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAAA;AAEC,sBACE,oBAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,KAAK,EAAE;AAAEoB,MAAAA,KAAK,EAAE;AAAT,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,eAEE;AAAI,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAFF,CADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,QAAQ,EAAEf,iBADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,WAAW,EAAC,4DAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,OAAD,CACE;AADF;AAEE,IAAA,OAAO,EAAEK,gBAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,CANF,CADF,CADF,eAwBE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADA,EAECpB,KAAK,CAAC+B,MAAN,gBACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG/B,KAAK,CAACgC,GAAN,CAAU,UAAAC,IAAI;AAAA,wBACb,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAE,YAAYD,IAAI,CAACC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,IAAI,CAACV,KADR,UACmBU,IAAI,CAACE,OADxB,CADF,CADF,eAME,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE;AAAA,eAAMtB,UAAU,CAACoB,IAAI,CAACC,GAAN,CAAhB;AAAA,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,eAOE,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAE;AAAA,eAAMvB,OAAO,CAACC,GAAR,CAAY,aAAZ,CAAN;AAAA,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADa;AAAA,GAAd,CADH,CADH,gBAeG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAjBJ,CADF,CAxBF,CADF;AAiDD;;AAGH,eAAeb,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport SaveBtn from \"../components/SaveBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Books() {\n  // Setting our component's initial state\n  const [books, setBooks] = useState([])\n  const [formObject, setFormObject] = useState({})\n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadBooks()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadBooks() {\n    API.getBooks()\n      .then(res => \n        setBooks(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteBook(id) {\n    API.deleteBook(id)\n      .then(res => loadBooks())\n      .catch(err => console.log(err));\n  }\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    console.log(\"event.target.value 1\", event.target.value);\n    const { name, value } = event.target.value;\n    setFormObject({...formObject, [name]: value});\n    console.log(\"formObject\", formObject);\n    console.log(\"formObject.value\", formObject.value);\n  };\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    console.log(\"Search Button clicked\");\n    console.log(\"event.target.value 2\", event.target.value);\n\n    API.getSearchedBooks({\n      title: formObject.name\n    })\n    .then(res => {\n      if (res.data.status === \"error\") {\n        throw new Error(res.data.message);\n      }\n      this.setState({ results: res.data.message, error: \"\" });\n      console.log(\"Response:\", res);\n    })\n        .catch(err => console.log(err));\n\n    // if (formObject.title && formObject.author) {\n    //   API.saveBook({\n    //     title: formObject.title,\n    //     author: formObject.author,\n    //     synopsis: formObject.synopsis\n    //   })\n    //     .then(res => loadBooks())\n    //     .catch(err => console.log(err));\n    // }\n  };\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-12 s-12\">\n            <Jumbotron>\n              <h1 style={{ color: \"green\" }}>React Google Books Search</h1>\n              <h2 style={{ color: \"orange\" }}>Search for and Save Books of Interest</h2>\n            </Jumbotron>\n            <h3>Book Search</h3>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"title\"\n                placeholder='Search by Book Title (required, e.g. \"The Great Gatsby\")'\n              />\n\n              <FormBtn\n                // disabled={!(formObject.authors && formObject.title)}\n                onClick={handleFormSubmit}\n              >\n                Search\n              </FormBtn>\n            </form>\n          </Col>\n        </Row>\n        <Row>\n          <Col size=\"md 12 s-12\">\n          <h3>Results</h3>\n          {books.length ? (\n              <List>\n                {books.map(book => (\n                  <ListItem key={book._id}>\n                    <Link to={\"/books/\" + book._id}>\n                      <strong>\n                        {book.title} by {book.authors}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => deleteBook(book._id)} />\n                    <SaveBtn onClick={() => console.log(\"Book saved!\")} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}